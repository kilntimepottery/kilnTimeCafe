install.packages(systemfonts)
system_fonts()
install.packages('systemfonts')
font_options <- system_fonts()
library(systemfonts)
font_options <- system_fonts()
View(font_options)
View(font_options)
setwd("C:/Users/bear/source/repos/KilnTimeBookingSystem/KilnTimeBookingSystem")
library(shiny); runApp('attempt2.R')
runApp('attempt2.R')
runApp('attempt2.R')
runApp('attempt2.R')
fetch_upcoming_bookings <- function() {
query <- "SELECT * FROM bookings WHERE date >= DATE('now')"
upcoming_bookings <- dbGetQuery(conn, query)
output$upcoming_bookings <- renderDT({
upcoming_bookings
}, options = list(pageLength = 10, autoWidth = TRUE))
}
runApp('attempt2.R')
conn <- dbConnect(SQLite(), "ChristineKilnTime.db")
runApp('attempt2.R')
runApp('attempt2.R')
runApp('attempt2.R')
runApp('attempt2.R')
dbDisconnect()
runApp('attempt2.R')
dbDisconnect(conn)
View(conn)
setwd("C:/Users/bear/source/repos/KilnTimeBookingSystem/KilnTimeBookingSystem")
#Create a connection to the database (create database if it doesn't exist)
conn <- dbConnect(SQLite(), "ChristineKilnTime.db")
library(RSQLite)
library(sodium)
#Create a connection to the database (create database if it doesn't exist)
conn <- dbConnect(SQLite(), "ChristineKilnTime.db")
#Create tables for availability and bookings
dbExecute(conn, "CREATE TABLE IF NOT EXISTS availability (
id INTEGER PRIMARY KEY,
day TEXT,
time TEXT,
available BOOLEAN)")
dbExecute(conn, "CREATE TABLE IF NOT EXISTS bookings (
id INTEGER PRIMARY KEY,
ref_number INTEGER,
service TEXT,
date TEXT,
time TEXT,
customer_name TEXT,
email TEXT,
phone_number TEXT,
guests INTEGER)")
dbExecute(conn, "CREATE TABLE IF NOT EXISTS users (
id INTEGER PRIMARY KEY,
username TEXT,
password_hash TEXT)")
dbExecute(conn, "CREATE TABLE IF NOT EXISTS closures (
id INTEGER PRIMARY KEY,
closure_date TEXT,
closure_time TEXT)")
dbExecute(conn, "CREATE TABLE IF NOT EXISTS events (
id INTEGER PRIMARY KEY,
event_name TEXT,
event_description TEXT,
event_date TEXT,
event_start_time TEXT,
event_duration INTEGER,
event_capacity INTEGER)")
dbExecute(conn, "CREATE TABLE IF NOT EXISTS event_bookings (
id INTEGER PRIMARY KEY,
event_name TEXT,
event_date TEXT,
event_time TEXT,
customer_name TEXT,
email TEXT,
phone_number TEXT,
guests INTEGER)")
tuesday_to_saturday_timeslots <- generate_time_slots("10:00 AM", "05:00 PM")
generate_time_slots <- function(start_time, end_time, interval = 15) {
start <- as.POSIXct(start_time, format = "%I:%M %p")
end <- as.POSIXct(end_time, format = "%I:%M %p")
slots <- seq(from = start, to = end, by = paste(interval, "mins"))
return(format(slots, "%I:%M %p"))
}
tuesday_to_saturday_timeslots <- generate_time_slots("10:00 AM", "05:00 PM")
sunday_slots <- generate_time_slots("11:00 AM", "05:00 PM")
availability_data <- data.frame(
day = c(rep("Tuesday", length(tuesday_to_saturday_timeslots)),
rep("Wednesday", length(tuesday_to_saturday_timeslots)),
rep("Thursday", length(tuesday_to_saturday_timeslots)),
rep("Friday", length(tuesday_to_saturday_timeslots)),
rep("Saturday", length(tuesday_to_saturday_timeslots)),
rep("Sunday", length(sunday_slots))),
time = c(rep(tuesday_to_saturday_timeslots, 5), sunday_slots),
available = TRUE
)
dbWriteTable(conn, "availability", availability_data, append = TRUE, row.names = FALSE )
availability_exists <- dbExistsTable(conn, "availability")
new_admin_username <- "katie"
new_admin_password <- "P@nt@l00n"
new_admin_password_hash <- sodium::password_store(new_admin_password)
dbExecute(conn, "INSERT INTO users (username, password_hash) VALUES (?, ?)",
params = list(new_admin_username, new_admin_password_hash))
print(availability_data)
library(shiny); runApp('attempt2.R')
print(dbGetInfo(conn)$dbname)
print(dbListTables(conn))
runApp('attempt2.R')
conn <- dbConnect(SQLite(), "ChristineKilnTime.db-journal")
conn <- dbConnect(SQLite(), "ChristineKilnTime.db")
print(dbIsValid(conn))
service <- "Pottery Painting"
date <- "29-01-2025"
time <- "11:15"
customer_name <- katie
customer_name <- "katie"
email <- "brownbearr584@gmail.com"
phone_number <- "07403518758"
guests <- 3
ref_number <- 014235
dbExecute(conn, "INSERT INTO bookings (service, date, time, customer_name, email, phone_number, guests, ref_number) VALUES (?, ?, ?, ?, ?, ?, ?, ?)", params = list(service, date, time, customer_name, email, phone_number, guests, ref_number))
reset_db_connection <- function() { if (dbIsValid(conn)) { dbDisconnect(conn)} conn <<- dbConnect(SQLite(), "ChristineKilnTime.db") print("Database connection reset successfully.")}
reset_db_connection <- function() {
if (dbIsValid(conn)) {
dbDisconnect(conn)
}
conn <<- dbConnect(SQLite(), "ChristineKilnTime.db")
print("Database Connection Reset Successfully.")
}
runApp('attempt2.R')
runApp('attempt2.R')
dbDisconnect(conn)
runApp('attempt2.R')
runApp('attempt2.R')
runApp('attempt2.R')
runApp('attempt2.R')
dbDisconnect(conn)
runApp('attempt2.R')
runApp('attempt2.R')
runApp('attempt2.R')
runApp('attempt2.R')
runApp('attempt2.R')
runApp('attempt2.R')
runApp('attempt2.R')
install.packages("shinyBS")
library(shinyBS)
runApp('attempt2.R')
runApp('attempt2.R')
dbDisconnect(conn)
runApp('attempt2.R')
dbDisconnect(conn)
runApp('attempt2.R')
dbDisconnect(conn)
reset_db_connection <- function() {
if (dbIsValid(conn)) {
dbDisconnect(conn)
}
conn <<- dbConnect(SQLite(), "ChristineKilnTime.db")
print("Database Connection Reset Successfully.")
}
reset_db_connection()
conn <- dbConnect(SQLite(), "ChristineKilnTime.db", timeout = 10)
runApp('attempt2.R')
dbDisconnect(conn)
#Create a connection to the database (create database if it doesn't exist)
conn <- dbConnect(SQLite(), "ChristineKilnTime2.db")
#Create tables for availability and bookings
dbExecute(conn, "CREATE TABLE IF NOT EXISTS availability (
id INTEGER PRIMARY KEY,
day TEXT,
time TEXT,
available BOOLEAN)")
dbExecute(conn, "CREATE TABLE IF NOT EXISTS bookings (
id INTEGER PRIMARY KEY,
ref_number INTEGER,
service TEXT,
date TEXT,
time TEXT,
customer_name TEXT,
email TEXT,
phone_number TEXT,
guests INTEGER)")
dbExecute(conn, "CREATE TABLE IF NOT EXISTS users (
id INTEGER PRIMARY KEY,
username TEXT,
password_hash TEXT)")
dbExecute(conn, "CREATE TABLE IF NOT EXISTS closures (
id INTEGER PRIMARY KEY,
closure_date TEXT,
closure_time TEXT)")
dbExecute(conn, "CREATE TABLE IF NOT EXISTS events (
id INTEGER PRIMARY KEY,
event_name TEXT,
event_description TEXT,
event_date TEXT,
event_start_time TEXT,
event_duration INTEGER,
event_capacity INTEGER)")
dbExecute(conn, "CREATE TABLE IF NOT EXISTS event_bookings (
id INTEGER PRIMARY KEY,
event_name TEXT,
event_date TEXT,
event_time TEXT,
customer_name TEXT,
email TEXT,
phone_number TEXT,
guests INTEGER)")
tuesday_to_saturday_timeslots <- generate_time_slots("10:00 AM", "05:00 PM")
sunday_slots <- generate_time_slots("11:00 AM", "05:00 PM")
availability_data <- data.frame(
day = c(rep("Tuesday", length(tuesday_to_saturday_timeslots)),
rep("Wednesday", length(tuesday_to_saturday_timeslots)),
rep("Thursday", length(tuesday_to_saturday_timeslots)),
rep("Friday", length(tuesday_to_saturday_timeslots)),
rep("Saturday", length(tuesday_to_saturday_timeslots)),
rep("Sunday", length(sunday_slots))),
time = c(rep(tuesday_to_saturday_timeslots, 5), sunday_slots),
available = TRUE
)
admin_password <- "kilnTimePottery123"
admin_password_hash <- sodium::password_store(admin_password)
admin_username <- "christineCarr"
dbExecute(conn, "INSERT INTO users (username, password_hash) VALUES (?, ?)",
params = list(admin_username, admin_password_hash))
new_admin_username <- "katie"
new_admin_password <- "P@nt@l00n"
new_admin_password_hash <- sodium::password_store(new_admin_password)
dbExecute(conn, "INSERT INTO users (username, password_hash) VALUES (?, ?)",
params = list(new_admin_username, new_admin_password_hash))
print(availability_data)
dbWriteTable(conn, "availability", availability_data, append = TRUE, row.names = FALSE )
availability_exists <- dbExistsTable(conn, "availability")
conn <- dbConnect(SQLite(), "ChristineKilnTime.db2", timeout = 10)
runApp('attempt2.R')
dbDisconnect(conn)
dbExecute(conn, "CREATE TABLE IF NOT EXISTS bookings (
id INTEGER PRIMARY KEY,
ref_number INTEGER,
service TEXT,
date TEXT,
time TEXT,
customer_name TEXT,
email TEXT,
phone_number TEXT,
guests INTEGER)")
#Create a connection to the database (create database if it doesn't exist)
conn <- dbConnect(SQLite(), "ChristineKilnTime2.db")
#Create tables for availability and bookings
dbExecute(conn, "CREATE TABLE IF NOT EXISTS availability (
id INTEGER PRIMARY KEY,
day TEXT,
time TEXT,
available BOOLEAN)")
dbExecute(conn, "CREATE TABLE IF NOT EXISTS bookings (
id INTEGER PRIMARY KEY,
ref_number INTEGER,
service TEXT,
date TEXT,
time TEXT,
customer_name TEXT,
email TEXT,
phone_number TEXT,
guests INTEGER)")
dbExecute(conn, "CREATE TABLE IF NOT EXISTS users (
id INTEGER PRIMARY KEY,
username TEXT,
password_hash TEXT)")
dbExecute(conn, "CREATE TABLE IF NOT EXISTS closures (
id INTEGER PRIMARY KEY,
closure_date TEXT,
closure_time TEXT)")
dbExecute(conn, "CREATE TABLE IF NOT EXISTS events (
id INTEGER PRIMARY KEY,
event_name TEXT,
event_description TEXT,
event_date TEXT,
event_start_time TEXT,
event_duration INTEGER,
event_capacity INTEGER)")
dbExecute(conn, "CREATE TABLE IF NOT EXISTS event_bookings (
id INTEGER PRIMARY KEY,
event_name TEXT,
event_date TEXT,
event_time TEXT,
customer_name TEXT,
email TEXT,
phone_number TEXT,
guests INTEGER)")
runApp('attempt2.R')
reset_db_connection <- function() {
if (dbIsValid(conn)) {
dbDisconnect(conn)
}
conn <<- dbConnect(SQLite(), "ChristineKilnTime.db2")
print("Database Connection Reset Successfully.")
}
reset_db_connection()
runApp('attempt2.R')
reset_db_connection()
library(RSQLite)
library(sodium)
#Create a connection to the database (create database if it doesn't exist)
conn <- dbConnect(SQLite(), "ChristineKilnTime.db")
#Create tables for availability and bookings
dbExecute(conn, "CREATE TABLE IF NOT EXISTS availability (
id INTEGER PRIMARY KEY,
day TEXT,
time TEXT,
available BOOLEAN)")
dbExecute(conn, "CREATE TABLE IF NOT EXISTS bookings (
id INTEGER PRIMARY KEY,
ref_number INTEGER,
service TEXT,
date TEXT,
time TEXT,
customer_name TEXT,
email TEXT,
phone_number TEXT,
guests INTEGER)")
dbExecute(conn, "CREATE TABLE IF NOT EXISTS users (
id INTEGER PRIMARY KEY,
username TEXT,
password_hash TEXT)")
dbExecute(conn, "CREATE TABLE IF NOT EXISTS closures (
id INTEGER PRIMARY KEY,
closure_date TEXT,
closure_time TEXT)")
dbExecute(conn, "CREATE TABLE IF NOT EXISTS events (
id INTEGER PRIMARY KEY,
event_name TEXT,
event_description TEXT,
event_date TEXT,
event_start_time TEXT,
event_duration INTEGER,
event_capacity INTEGER)")
dbExecute(conn, "CREATE TABLE IF NOT EXISTS event_bookings (
id INTEGER PRIMARY KEY,
event_name TEXT,
event_date TEXT,
event_time TEXT,
customer_name TEXT,
email TEXT,
phone_number TEXT,
guests INTEGER)")
tuesday_to_saturday_timeslots <- generate_time_slots("10:00 AM", "05:00 PM")
sunday_slots <- generate_time_slots("11:00 AM", "05:00 PM")
availability_data <- data.frame(
day = c(rep("Tuesday", length(tuesday_to_saturday_timeslots)),
rep("Wednesday", length(tuesday_to_saturday_timeslots)),
rep("Thursday", length(tuesday_to_saturday_timeslots)),
rep("Friday", length(tuesday_to_saturday_timeslots)),
rep("Saturday", length(tuesday_to_saturday_timeslots)),
rep("Sunday", length(sunday_slots))),
time = c(rep(tuesday_to_saturday_timeslots, 5), sunday_slots),
available = TRUE
)
admin_password <- "kilnTimePottery123"
admin_password_hash <- sodium::password_store(admin_password)
admin_username <- "christineCarr"
dbExecute(conn, "INSERT INTO users (username, password_hash) VALUES (?, ?)",
params = list(admin_username, admin_password_hash))
